# A few utility functions
command_exists () {
  # https://unix.stackexchange.com/questions/85249/why-not-use-which-what-to-use-then
  # https://unix.stackexchange.com/questions/86012/what-is-the-purpose-of-the-hash-command
  command -v "$1" > /dev/null 2>&1
  return $?
}
try_source () {
  [ -r "$1" ] && . "$1"
  return $?
}
try_prepend_path () {
  [ -d "$1" ] && ! echo "$PATH" | grep -Fq "$1" && PATH="$1":"$PATH"
  return $?
}


########################################################################
# Calculate path
########################################################################
# Add ~/bin:/usr/local/sbin:/usr/local/bin to path if they're not there
for pathprefix in \
  /usr/local/go/bin \
  /usr/local/bin \
  /usr/local/sbin \
  /usr/local/opt/coreutils/libexec/gnubin \
  "$HOME"/.local/go/bin \
  "$HOME"/.local/dotnet \
  "$HOME"/.dotnet/tools \
  "$HOME"/.cargo/bin \
  ; do
    try_prepend_path "$pathprefix"
done
unset pathprefix

# Nix doesn't check before just prepending itself to $PATH. :(
[ -z "$NIX_PATH" ] && try_source "$HOME"/.nix-profile/etc/profile.d/nix.sh

# "Fix" locales in nix stuff. Note this will probably break in multiple ways
# in the future and calls my entire use of nix into question tbh. Refs:
# https://github.com/NixOS/nixpkgs/issues/21820
# https://github.com/NixOS/nix/issues/599
[ -d "$HOME"/.nix-profile ] && [ -r /usr/lib/locale/locale-archive ] && \
  export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive

# Set GOPATH environment variable to the Go lang workspace.
[ -d "$HOME"/Workspace/go-workspace ] && \
  export GOPATH="$HOME"/Workspace/go-workspace

# Add the Go Workspace's bin subdirectory to PATH.
[ "${GOPATH}x" != "x" ] && \
  try_prepend_path "$GOPATH"/bin

# Gopath defaults to $HOME/go
try_prepend_path "$HOME"/go/bin

# Python pip install --user (macos): https://stackoverflow.com/a/7143496/113225
if [ -r "$HOME"/Library/Python ]; then
  for version in "$HOME"/Library/Python/*; do
    try_prepend_path "$version"
  done
  unset version
fi

# Ruby
if [ -r "$HOME"/.gem/ruby ]; then
  for version in "$HOME"/.gem/ruby/*; do
    try_prepend_path "$version"
  done
  unset version
fi

# home/bin needs to take precedence over everything
try_prepend_path "$HOME"/bin
try_prepend_path "$HOME"/.local/bin

########################################################################
# END: Calculate path
########################################################################

# Load our dotfiles like ~/.bash_prompt, etc.
#   ~/.extra can be used for settings you don't want to commit,
#   Use it to configure your PATH, thus it being first in line.
#   .extra should be the last thing that mucks with PATH. The
#   other sourced files are done after PATH calculation in case
#   they are dependent on commands
for file in extra exports aliases functions lambdash; do
    try_source "$HOME"/."$file"
done
unset file
[ -r "$HOME"/.functions ] && export BASH_ENV="$HOME"/.functions
# Determine running shell as bash/zsh/other
if test -n "${BASH_VERSION-}" -a -n "$PS1" ; then
  runningshell=bash
elif test -n "${ZSH_VERSION-}" ; then
  runningshell=zsh
else
  runningshell=other
fi

# Calculate prompt
echo $- | grep -qv i
interactive=$?
# who required for liquidprompt but not in termux
command_exists who || alias who='echo ""'
[ $interactive -eq 1 ] && [ $runningshell != other ] && { \
  try_source "$HOME"/.liquidprompt/liquidprompt || \
  try_source "$HOME"/liquidprompt/liquidprompt || \
  try_source "$HOME"/.bash_prompt; }

# Set the default text editor.
export EDITOR='vi'
command_exists vim && export EDITOR='vim'
command_exists nvim && export EDITOR='nvim'
export SUDO_EDITOR=$(command -v $EDITOR)
command_exists st && export TERMINAL='st'
command_exists alacritty && export TERMINAL='alacritty' # Let's try alacritty

[ "$PS2" = "%_> " ] && export PS2="%_âš¡ "

[ -r "$HOME"/.LS_COLORS ] && [ ! -r "$HOME"/.dircolors ] && \
  (cd "$HOME" && ln -s .LS_COLORS/LS_COLORS .dircolors)

[ -r "$HOME"/.dircolors ] && command_exists dircolors && \
  eval $(dircolors -b "$HOME"/.dircolors)

if [ -d ~/.nvm ]; then
  export NVM_DIR=~/.nvm

  # See https://github.com/creationix/nvm/issues/539#issuecomment-245791291
  # This loads nvm if installed via curl with directions from github
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" --no-use
  # load from homebrew (without using brew --prefix nvm)
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh" --no-use

  alias node='unalias node ; unalias npm ; nvm use default ; node $@'
  alias npm='unalias node ; unalias npm ; nvm use default ; npm $@'
fi

# Syntax highlighting for less. Looking at the two common
# install paths should be slightly faster than using which
[ -r /usr/local/bin/src-hilite-lesspipe.sh ] && \
  export LESSOPEN="| /usr/local/bin/src-hilite-lesspipe.sh %s" && \
  export LESS=" -R "

[ -r /usr/bin/src-hilite-lesspipe.sh ] && \
  export LESSOPEN="| /usr/bin/src-hilite-lesspipe.sh %s" && \
  export LESS=" -R "

# Ubuntu
[ -r /usr/share/source-highlight/src-hilite-lesspipe.sh ] && \
  export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s" && \
  export LESS=" -R "

# Check for GPG, and if installed, use it
# Based on https://gist.github.com/bmhatfield/cc21ec0a3a2df963bffa3c1f884b676b
user="${USER:-$(whoami)}"
if command_exists gpg-agent; then
  # We have gpg-agent, great
  export GPG_TTY=$(tty)
  # The latter command should only be run on busybox, which does not have -U
  # If we're running busybox we're probably single user...
  if [ -z "$(pgrep -U "$user" gpg-agent 2>/dev/null || pgrep gpg-agent)" ]; then
    eval $(gpg-agent --daemon --enable-ssh-support 2> /dev/null)
  fi
  if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
    export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
    # update tty for SSH pinentry
    gpg-connect-agent updatestartuptty /bye > /dev/null 2>&1
  fi
fi

if [ -z "$GPG_TTY" ] && command_exists ssh-agent; then
  # Fallback to SSH
  #
  # SSH agent stuff might need to be added. See
  # https://coderwall.com/p/qdwcpg/using-the-latest-ssh-from-homebrew-on-osx
  # for more details
  #
  # Use single ssh-agent launched by launchd
  #
  [ -f /usr/local/bin/ssh-ask-keychain ] && \
    export SSH_ASKPASS=/usr/local/bin/ssh-ask-keychain
  [ -f "/usr/lib/ssh/x11-ssh-askpass" ] && \
    export SSH_ASKPASS="/usr/lib/ssh/x11-ssh-askpass"

  # Discover the running ssh-agent
  export SSH_AGENT_PID=$(pgrep -U "$user" ssh-agent 2>/dev/null || pgrep ssh-agent)

  # Found a running ssh agent? Link up to it. This is hard...
  if [ -n "$SSH_AGENT_PID" ]; then
    live_socket=0
    [ -r "${HOME}/.ssh-agent-info" ] && \
      eval $(cat ${HOME}/.ssh-agent-info) > /dev/null && \
      ssh-add -l 2> /dev/null > /dev/null
    live_socket=$?;

    # if live_socket is non-zero, existing agent info file isn't valid and lsof doesn't work (anymore?)
    # Go find it manually
    [ $live_socket -ne 0 ] && \
      export SSH_AUTH_SOCK=$(ls -lt /tmp/ssh-*/agent.* 2> /dev/null | head -n 1 | grep "$user" | awk '{print $9}') && \
      ssh-add -l 2> /dev/null > /dev/null
    live_socket=$?

    # If live socket is still non-zero, we still don't have a live socket and our
    # cheater check didn't work. We'll go to ssh-find-agent, which is slow
    # but pretty thorough
    [ $live_socket -ne 0 ] && [ -r "${HOME}/.ssh-find-agent.sh" ] && \
      [ -r "${HOME}/.ssh/authorized_keys" ] && \
      . "${HOME}/.ssh-find-agent.sh" && set_ssh_agent_socket
    live_socket=$?

    # If live socket is still non-zero, we need to just give up
    [ $live_socket -ne 0 ] && unset SSH_AGENT_PID && \
      echo "could not find socket for running agent. Install .ssh-find-agent.sh?"

    unset live_socket
  else
    # easy case - crank an agent up. It's still possible, though unlikely
    # we don't have ssh-agent. We'll save the socket info for later
    command_exists ssh-agent && \
      ssh-agent -s > "${HOME}/.ssh-agent-info" && \
      eval $(cat "${HOME}/.ssh-agent-info") > /dev/null
  fi

  # Add all the local keys, getting the passphrase from keychain,
  # helped by the $SSH_ASKPASS script.
  [ -n "$SSH_AGENT_PID" ] && [ ! -z "$SSH_AUTH_SOCK" ] && \
    alias ssh='ssh-add -l > /dev/null || ssh-add && unalias ssh ; ssh'
fi # SSH section if gpg-agent not available

# Allow Ctrl-S for forward search at the expense of losing terminal stop
[ $interactive -eq 1 ] && stty stop ''

# Must be performed last. We're using lowercase dash because we don't have
# a great way to detect "hey, this isn't bash or zsh".
# TODO: figure out how to detect pure POSIX-ness
[ $runningshell != other ] && \
  [ -r "${HOME}/.oh-my-bash-zsh/oh-my-bash-zsh.sh" ] && \
  . "${HOME}/.oh-my-bash-zsh/oh-my-bash-zsh.sh"
